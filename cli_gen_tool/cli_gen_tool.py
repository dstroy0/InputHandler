##
# @file cli_gen_tool.py
# @author Douglas Quigg (dstroy0 dquigg123@gmail.com)
# @brief InputHandler CLI generation tool
# @version 0.1
# @date 2022-06-10
# @copyright Copyright (c) 2022

# Copyright (C) 2022 Douglas Quigg (dstroy0) <dquigg123@gmail.com>

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# version 3 as published by the Free Software Foundation.

from __future__ import absolute_import # easy import pathing
import os
import sys
import json
import platform
from PySide6.QtWidgets import (QApplication, QMainWindow, QDialog, QLabel,
                               QVBoxLayout, QFileDialog, QHeaderView, )
from PySide6.QtCore import (QFile, Qt, QIODevice, QTextStream,
                            QByteArray, QDir, QRegularExpression, QEvent)
from PySide6.QtGui import(QValidator, QRegularExpressionValidator, QIntValidator)

# import classes generated by PySide6 uic
from res.uic.mainWindow import Ui_MainWindow
from res.uic.commandParametersDialog import Ui_commandParametersDialog

# MainWindow setup

def regex_validator(input):
    exp = QRegularExpression(input)
    return QRegularExpressionValidator(exp)

# command_settings widget setup
def command_settings_setup(self):
    # print('command_settings setup')    
        
    self.ui.functionName.setValidator(regex_validator("^([a-zA-Z_])+$"))
    self.ui.commandString.setValidator(regex_validator("^([a-zA-Z_*])+$"))
    self.ui.commandParentId.setValidator(regex_validator("^([0-9])+$"))
    self.ui.commandId.setValidator(regex_validator("^([0-9])+$"))
    
    self.ui.commandDepth.setMaximum(255)
    self.ui.commandSubcommands.setMaximum(255)
    
    self.ui.commandMinArgs.setMaximum(255)
    self.ui.commandMaxArgs.setMaximum(255)
    
    
# settings_tree widget setup
def settings_tree_setup(self):
    # print('settings_tree setup')
    self.ui.settings_tree.setHeaderLabels(("Setting", "Type", "Value"))
    self.ui.settings_tree.header().setSectionResizeMode(0, QHeaderView.Stretch)
    self.ui.settings_tree.header().setSectionResizeMode(2, QHeaderView.Stretch)

# actions setup
def actions_setup(self):
    # print('actions setup')
    # file menu
    self.ui.actionOpen.triggered.connect(self.open_file)
    self.ui.actionSave.triggered.connect(self.save_file)
    self.ui.actionSave_As.triggered.connect(self.save_file_as)
    self.ui.actionPreferences.triggered.connect(self.gui_settings)
    self.ui.actionExit.triggered.connect(self.gui_exit)
    # generate menu
    self.ui.actionGenerate_CLI_Files.triggered.connect(self.generate_cli_files)
    # about menu
    self.ui.actionAbout.triggered.connect(self.gui_about)
    self.ui.actionInputHandler_Documentation.triggered.connect(self.gui_documentation)

# button setup
def buttons_setup(self):
    # print('buttons setup')
    # tab 1
    self.ui.editButton_1.clicked.connect(self.clicked_edit_tab_one)
    self.ui.clearButton_1.clicked.connect(self.clicked_clear_tab_one)
    self.ui.defaultButton_1.clicked.connect(self.clicked_default_tab_one)
    # tab 2
    # always visible
    self.ui.newButton_2.clicked.connect(self.clicked_new_tab_two)
    self.ui.editButton_2.clicked.connect(self.clicked_edit_tab_two)
    self.ui.deleteButton_2.clicked.connect(self.clicked_delete_tab_two)
    self.ui.openCloseSettingsMenuButton.clicked.connect(
        self.clicked_open_close_command_settings_menu_tab_two)
    # visible if self.ui.command_settings.isVisible()
    self.ui.closeSettingsMenuButton.clicked.connect(
        self.clicked_close_command_settings_menu_tab_two)
    self.ui.commandSettingsMenuApplyButton.clicked.connect(
        self.clicked_apply_command_settings_menu_tab_two)

# change-driven events
def triggers_setup(self):
    # print('triggers setup')
    # tab 2
    self.ui.commandString.textChanged.connect(self.command_string_text_changed)

def load_cli_gen_tool_json(self):
    path = QDir.currentPath() + "/cli_gen_tool/cli_gen_tool.json"
    file = QFile(path)
    if (not file.open(QIODevice.ReadOnly | QIODevice.Text)):
        file.close()
        file = QFile(path)
        print('cli_gen_tool/cli_gen_tool.json not found, attempting to create a new one.')            
        if (not file.open(QIODevice.WriteOnly | QIODevice.Text)):
            print('Unable to write new cli_gen_tool.json, please check permissions.')
            return
        out = QByteArray(json.dumps(self.defaultGuiOpt, indent=4, sort_keys=True))  # dump pretty json                        
        file.write(out)
        print('write successful')                        
        file.close()
        file = QFile(path)
        if (not file.open(QIODevice.ReadOnly | QIODevice.Text)):
            print('unable to open cli_gen_tool/cli_gen_tool.json')
    data_in = QTextStream(file).readAll()
    file.close()        
    # print(path)
    try:
        self.session = json.loads(data_in)
        print("loaded:", self.session, sep='')
    except (ValueError, RuntimeError, TypeError, NameError) as e:
            print('json corrupt, removing')
            if self.json_except == 1:
                print('unable to read json, app exit')
                app.quit()
            self.json_except = 1
            os.remove(path) # delete corrupt json
            load_cli_gen_tool_json(self) # recurse to try and recreate cli_gen_tool.json
            print(e)

# end MainWindow setup

# MainWindow runs everything
class MainWindow(QMainWindow):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        
        # command parameters dialog box
        self.ui.commandParametersDialog = QDialog()
        self.ui.commandParametersDialog.dlg = Ui_commandParametersDialog()
        self.ui.commandParametersDialog.dlg.setupUi(self.ui.commandParametersDialog)        
        
        # MainWindow var
        # session db
        self.session = {}
        # active save filename
        self.saveFileName = ''

        # cli opt
        self.cliOpt = {'var': {'num_commands': 0},
                       'commands': {},
                       'config':{}}        
        
        # command parameters dict keys list
        self.commandParametersKeys = ['functionName',
                                      'commandString',
                                      'commandLength',
                                      'parentId',
                                      'commandId',
                                      'commandHasWildcards',
                                      'commandDepth',
                                      'commandSubcommands',
                                      'commandArgumentHandling',
                                      'commandMinArgs',
                                      'commandMaxArgs']

        # default settings dict to regen cli_gen_tool.json if it becomes corrupt
        self.defaultGuiOpt = {"opt": { "save_filename": None,
                                       "recent_files": {},
                                       "output_dir": "default",
                                       "window_size": "default"}}
        # end MainWindow var

        # tab 1
        settings_tree_setup(self)  # settings_tree widget setup

        # tab 2
        self.ui.command_settings.hide()  # hide command settings menu widget
        command_settings_setup(self) # command_settings widget setup
        
        # connect objects to methods
        actions_setup(self)  # actions setup
        buttons_setup(self)  # buttons setup
        triggers_setup(self)  # triggers setup

        # load cli_gen_tool (session) json
        load_cli_gen_tool_json(self)
        
    # actions
    def open_file(self):
        print('open file')
        # inherit from parent QMainWindow (block main window interaction while dialog box is open)
        dlg = QFileDialog(self)
        dlg.setFileMode(QFileDialog.ExistingFile)
        dlg.setNameFilter("Settings json (*.json)")
        dlg.setViewMode(QFileDialog.Detail)
        fileName = ""
        if dlg.exec():
            fileName = dlg.selectedFiles()
        else:
            return  # dialog cancelled
        file = QFile(fileName[0])
        if (not file.open(QIODevice.ReadOnly | QIODevice.Text)):
            return  # TODO error
        data_in = QTextStream(file).readAll()
        file.close()
        self.cliOpt = json.loads(data_in)  # TODO try/except

    def save_file(self):
        print('save file')
        if self.saveFileName == '':
            self.save_file_as()
            return
        file = QFile(self.saveFileName)
        if (not file.open(QIODevice.WriteOnly | QIODevice.Text)):
            return  # TODO error
        out = QByteArray(json.dumps(self.cliOpt,
                         indent=4, sort_keys=True))  # dump pretty json
        file.write(out)
        file.close()

    def save_file_as(self):
        print('save file as')
        # inherit from parent QMainWindow (block main window interaction while dialog box is open)
        dlg = QFileDialog(self)
        fileName = dlg.getSaveFileName(self, "Save file name", "", ".json")
        if fileName[0] == '':
            return  # dialog cancelled
        fqname = fileName[0] + ".json"
        self.saveFileName = fqname
        file = QFile(fqname)
        if (not file.open(QIODevice.WriteOnly | QIODevice.Text)):
            return  # TODO error
        out = QByteArray(json.dumps(self.cliOpt, indent=4,
                         sort_keys=True))  # dump pretty json
        file.write(out)
        file.close()

    # TODO
    def gui_settings(self):
        print('preferences')

    # close gui
    def gui_exit(self):
        sys.exit(app.quit())

    # TODO
    # generate CLI files
    def generate_cli_files(self):
        print('generate cli files')

    def gui_about(self):
        # print('about')
        # inherit from parent QMainWindow (block main window interaction while dialog box is open)
        dlg = QDialog(self)
        dlg.layout = QVBoxLayout()
        dlg.setWindowTitle('About')
        dlg.git_link_label = QLabel()
        dlg.git_link_label.setText(
            "<a href=\"https://github.com/dstroy0/InputHandler\">Link to library git</a>")
        dlg.git_link_label.setAlignment(Qt.AlignCenter)
        dlg.git_link_label.setTextInteractionFlags(Qt.TextBrowserInteraction)
        dlg.git_link_label.setOpenExternalLinks(True)
        dlg.layout.addWidget(dlg.git_link_label)
        dlg.author_credit_label = QLabel()
        dlg.author_credit_label.setText(
            "Library authors:\nDouglas Quigg (dstroy0 dquigg123@gmail.com)\nBrendan Doherty (2bndy5 2bndy5@gmail.com)")
        dlg.author_credit_label.setAlignment(Qt.AlignCenter)
        dlg.layout.addWidget(dlg.author_credit_label)
        dlg.setLayout(dlg.layout)
        dlg.exec()

    def gui_documentation(self):
        os_type = platform.uname().system.lower()  # lowercase os type
        # windows
        if os_type == "windows":
            os.system("start \"\" https://dstroy0.github.io/InputHandler/")
        # macos
        elif os_type == "darwin":
            os.system("open \"\" https://dstroy0.github.io/InputHandler/")
        # linux
        elif os_type == "linux":
            os.system("xdg-open \"\" https://dstroy0.github.io/InputHandler/")

    # buttons
    # tab 1
    # TODO
    def clicked_edit_tab_one(self):
        print('clicked tab 1 edit')
    # TODO

    def clicked_clear_tab_one(self):
        print('clicked tab 1 clear')
    # TODO

    def clicked_default_tab_one(self):
        print('clicked tab 1 default')
    # tab 2
    # TODO

    def clicked_edit_tab_two(self):
        print('clicked tab 2 edit')
    # TODO

    def clicked_new_tab_two(self):
        print('clicked tab 2 new')
    # TODO

    def clicked_delete_tab_two(self):
        print('clicked tab 2 delete')

    def clicked_open_close_command_settings_menu_tab_two(self):
        print('clicked open/close command settings menu')        
        self.ui.commandParametersDialog.show()
        

    def clicked_close_command_settings_menu_tab_two(self):
        print('clicked close command settings menu')
        
    
    def clicked_apply_command_settings_menu_tab_two(self):
        settings_to_validate = dict.fromkeys(self.commandParametersKeys, None)
        settings_to_validate['functionName'] = self.ui.functionName.text()
        settings_to_validate['commandString'] = self.ui.commandString.text()
        settings_to_validate['commandLength'] = len(settings_to_validate['commandString'])
        settings_to_validate['parentId'] = self.ui.commandParentId.text()
        settings_to_validate['commandId'] = self.ui.commandId.text()
        settings_to_validate['commandHasWildcards'] = self.ui.commandHasWildcards.isChecked()
        settings_to_validate['commandDepth'] = self.ui.commandDepth.text()
        settings_to_validate['commandSubcommands'] = self.ui.commandSubcommands.text()
        settings_to_validate['commandArgumentHandling'] = self.ui.commandArgumentHandling.currentIndex()
        settings_to_validate['commandMinArgs'] = self.ui.commandMinArgs.text()
        settings_to_validate['commandMaxArgs'] = self.ui.commandMaxArgs.text()    
        
        # get array index
        cmd_idx = self.cliOpt['var']['num_commands']
        # make dict from defined keys
        self.cliOpt['commands'][cmd_idx] = settings_to_validate
        print(self.cliOpt['commands'][cmd_idx])        
        
        # command parameters were accepted, so increment the array index
        self.cliOpt['var']['num_commands'] = self.cliOpt['var']['num_commands'] + 1
        # print object
        print(self.cliOpt['commands'][cmd_idx])
    
    def command_string_text_changed(self):
        self.ui.commandLengthLabel.setText(str(len(self.ui.commandString.text())))
        
if __name__ == "__main__":
    app = QApplication(sys.argv)

    window = MainWindow()
    window.show()

    sys.exit(app.exec())

# end of file
