##
# @file dev_qol_var.py
# @author Douglas Quigg (dstroy0 dquigg123@gmail.com)
# @brief MainWindow external methods
# @version 1.0
# @date 2022-07-08
# @copyright Copyright (c) 2022
# Copyright (C) 2022 Douglas Quigg (dstroy0) <dquigg123@gmail.com>
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# version 3 as published by the Free Software Foundation.

import datetime
from collections import OrderedDict
from PySide6.QtCore import QDir

# dev qol var
# these are here for ease of access, clarity, or both
version = 0.1  # save serialization
## Library pathing
path = QDir()
path.cdUp()
lib_root_path = path.currentPath()
## How long should the splash be displayed (in ms)
splashscreen_duration = 2750
## The first line of every file generated by this tool.
file_first_line = (
    "/* Generated by InputHandler's /InputHandler/cli_gen_tool/cli_gen_tool.py version "
    + str(version)
    + " */\n"
)

## Automatically generated file docstring.
file_docs_format_string = """/**
* @file {}
* @author Douglas Quigg (dstroy0 dquigg123@gmail.com)
* @brief {}
* @version {}
* @date {}
*
* @copyright Copyright (c) {}
*/
/*
* Copyright (c) {} Douglas Quigg (dstroy0) <dquigg123@gmail.com>
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* version 3 as published by the Free Software Foundation.
*/"""
## The format list for the docstring.
file_docs_format_list = [
    "filename_ph",
    "brief_ph",
    "version_ph",
    datetime.date.today(),
    str(datetime.date.today())[0:4],
    str(datetime.date.today())[0:4],
]

## Command parameters dicts are constructed using keys from this list.
command_parameters_dict_keys_list = [
    "functionName",
    "commandString",
    "commandLength",
    "parentId",
    "commandId",
    "commandHasWildcards",
    "commandDepth",
    "commandSubcommands",
    "commandArgumentHandling",
    "commandMinArgs",
    "commandMaxArgs",
    "commandArguments",
]

## This is used to create the session json.
default_session_structure = {
    "type": "session",
    "tool_version": str(version),
    "opt": {
        "save_filename": None,
        "log_filename": None,
        "recent_files": {},
        "input_config_file_path": "",
        "output_dir": "",
        "window_size": "",
    },
}

## This dict contains all pertinent information about a CLI, widget objects are created at runtime.
command_line_interface_options_structure = {
    "type": "cli options",
    "var": {"num_commands": 0, "tool_version": str(version)},
    "commands": {},
    "config": {
        "file_lines": [],
        "tree": {
            "root": "",
            "parents": {},
            "items": {
                "library settings": {},
                "progmem settings": {},
                "debug methods": {},
                "optional methods": {},
            },
        },
    },
    "process output": {"var": {"buffer size": 0}, "tree": {"root": "", "items": {}}},
    "process parameters": {
        "var": {
            "process name": "",
            "end of line characters": "\r\n",
            "input control char sequence": "##",
            "wildcard char": "*",
            "data delimiter sequences": {0: " ", 1: ","},
            "start stop data delimiter sequences": {0: '"', 1: '"'},
        },
        "tree": {
            "root": "",
            "parents": {},
            "items": {
                "data delimiter sequences": {
                    "QTreeWidgetItem": "",
                    "QTableWidget": "",
                    "QTableWidgetItems": {
                        "input cells": {},
                        "add row": {"item": "", "button": ""},
                        "remove row buttons": {"items": {}, "buttons": {}},
                    },
                },
                "start stop data delimiter sequences": {
                    "QTreeWidgetItem": "",
                    "QTableWidget": "",
                    "QTableWidgetItems": {
                        "input cells": {},
                        "add row": {"item": "", "button": ""},
                        "remove row buttons": {"items": {}, "buttons": {}},
                    },
                },
            },
        },
    },
}

## Acceptable command argument types.
command_arg_types_list = [
    "UINT8_T",
    "UINT16_T",
    "UINT32_T",
    "INT16_T",
    "FLOAT",
    "CHAR",
    "STARTSTOP",
    "NOTYPE",
]

## This dict is ordered to preserve insert order for code preview display.
generated_filename_dict = OrderedDict()
## This dict contains all generated files and associated widgets.
generated_filename_dict = {
    "config.h": {
        "filename": "",
        "file_lines_list": [],
        "tree_item": {},
        "contents_item": {},
        "text_widget": {0: "", 1: ""},
    },
    "setup.h": {
        "filename": "",
        "file_lines_list": [],
        "tree_item": {},
        "contents_item": {},
        "text_widget": {0: "", 1: ""},
    },
    "parameters.h": {
        "filename": "",
        "file_lines_list": [],
        "tree_item": {},
        "contents_item": {},
        "text_widget": {0: "", 1: ""},
    },
    "functions.h": {
        "filename": "",
        "file_lines_list": [],
        "tree_item": {},
        "contents_item": {},
        "text_widget": {0: "", 1: ""},
    },
    "functions.cpp": {
        "filename": "",
        "file_lines_list": [],
        "tree_item": {},
        "contents_item": {},
        "text_widget": {0: "", 1: ""},
    },
}

## The line in /InputHandler/src/config/config.h that boolean define fields start.
config_file_boolean_define_fields_line_start = 71

## This offsets code preview line display; Positive values move text lines down, Negative values move text lines up.
code_preview_text_line_offset = 4


setup_h_addcommand_string = "    {objectname}.addCommand({commandparametersname});\n"

setup_h_options_string_list = [
    "    {objectname}.listCommands(); // formats output_buffer with the command list\n",
    "    {objectname}.outputToStream({stream}); // class output\n",
]

## setup.h
setup_h_filestring = """
#if !defined(__CLI_SETUP__)
    #define __CLI_SETUP__
    #include <InputHandler.h>
    #include "functions.h"
    #include "parameters.h"

char output_buffer[{buffersize}] = {bufferchar}; // output buffer

const PROGMEM IH_pname pname = "{processname}"; // process name
const PROGMEM IH_eol peol = "{processeol}"; // process end of line char
const PROGMEM IH_input_cc pinputcc = "{processinputcontrolchar}"; // input control character sequence
const PROGMEM IH_wcc pwcc = "{processwildcardchar}"; // process wildcard char
const PROGMEM InputProcessDelimiterSequences pdelimseq = {{
    {numdelimseq}, // number of delimiter sequences
    {delimseqlens}, // delimiter sequence lens
    {delimseqs} // delimiter sequences
}};

const PROGMEM InputProcessStartStopSequences pststpseq = {{
    {numstartstoppairs}, // num start stop sequence pairs
    {startstopseqlens}, // start stop sequence lens
    {startstopseqs} // start stop sequence pairs
}};

const PROGMEM InputProcessParameters input_prm[1] = {{
    &pname,
    &peol,
    &pinputcc,
    &pwcc,
    &pdelimseq,
    &pststpseq}};
UserInput {objectname}(output_buffer, buffsz(output_buffer), input_prm);

void InputHandler_setup()
{{
    Serial.println(F("{setupstring}"));
    {objectname}.defaultFunction(unrecognized); // set default function, called when user input has no match or is not valid
    {commandlist}
    {objectname}.begin();                       // required.  returns true on success.
    {options}
}}
#endif"""

# end dev qol var
