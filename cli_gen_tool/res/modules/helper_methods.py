##
# @file helper_methods.py
# @author Douglas Quigg (dstroy0 dquigg123@gmail.com)
# @brief MainWindow external methods
# @version 1.0
# @date 2022-07-08
# @copyright Copyright (c) 2022
# Copyright (C) 2022 Douglas Quigg (dstroy0) <dquigg123@gmail.com>
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# version 3 as published by the Free Software Foundation.

from __future__ import absolute_import

from PySide6.QtWidgets import (
    QDialog,
    QDialogButtonBox,    
    QLabel,
    QVBoxLayout,
    QWidget,
)
from res.modules.dev_qol_var import version
from res.modules.logging_setup import Logger


# helper method class
class HelperMethods(object):
    def __init__(self):
        super(HelperMethods, self).__init__()
        HelperMethods.logger = Logger.get_child_logger(self.logger, __name__)    

    def create_qdialog(self, message, message_text_alignment, window_title=None, buttons=None, icon=None):
        HelperMethods.logger.info(
            "message: "
            + message
            + ", windowtitle: "
            + window_title
            + ", buttons: "
            + str(buttons)
        )
        _buttons = []
        dlg = QDialog(self)

        def button_box_clicked(button):
            _match = 0
            for i in range(len(_buttons)):
                if button == _buttons[i]:
                    _match = i
                    break
            b = QDialogButtonBox.StandardButton
            if buttons[_match] == b.Ok:
                dlg.accept()
            if buttons[_match] == b.Cancel:
                dlg.reject()
            if buttons[_match] == b.Save:
                dlg.done(2)
            if buttons[_match] == b.Close:
                dlg.reject()

        # create popup
        dlg.layout = QVBoxLayout()
        dlg.label = QLabel(message)
        dlg.label.setAlignment(message_text_alignment)                
        dlg.label.setFixedHeight(dlg.label.sizeHint().height() + 8)
        dlg.layout.addWidget(dlg.label)
                
        if buttons != None:
            dlg.button_box = QDialogButtonBox(dlg)
            for item in buttons:
                _button = dlg.button_box.addButton(item)
                _buttons.append(_button)
            dlg.button_box.clicked.connect(button_box_clicked)
            dlg.layout.addWidget(dlg.button_box)
        dlg.setLayout(dlg.layout)        
        if icon != None:
            dlg.setWindowIcon(icon)
        if window_title != None:
            dlg.setWindowTitle(window_title)
        ret = dlg.exec()
        return ret

    def generate_docstring_list_for_filename(self, filename):
        docstring_list = []
        docstring_list.append(self.file_first_line.strip("\n"))
        self.update_file_docstring(
            filename, "autogenerated InputHandler CLI " + filename, str(version)
        )
        docs_list = self.docs.split("\n")
        # docs_list.pop()
        for line in docs_list:
            docstring_list.append(line)
        return docstring_list

    def list_to_code_string(self, list):
        code_string = ""
        for line in list:
            code_string = code_string + line + "\n"
        return code_string

    def update_file_docstring(self, file, brief, version):
        self.docs_format_list[0] = file
        self.docs_format_list[1] = brief
        self.docs_format_list[2] = version
        self.docs = self.format_docstring.format(*self.docs_format_list)

    def get_icon(self, pixmapapi):
        return QWidget().style().standardIcon(pixmapapi)
