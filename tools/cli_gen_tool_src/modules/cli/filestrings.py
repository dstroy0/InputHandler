##
# @file filestrings.py
# @author Douglas Quigg (dstroy0 dquigg123@gmail.com)
# @brief CLI filestrings
# @version 1.0
# @date 2022-08-02
# @copyright Copyright (c) 2022
# Copyright (C) 2022 Douglas Quigg (dstroy0) <dquigg123@gmail.com>
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# version 3 as published by the Free Software Foundation.

from __future__ import absolute_import

# TODO move license string to its own variable
## file construction strings
class cliFileStrings(object):
    ## library version
    lib_version = ""
    ## version is implanted in all docstrings
    version = ""
    ## README.md
    readmemd = """<!-- markdownlint-disable MD041 -->    
# InputHandler autogenerated CLI readme

## tool, library, and generated CLI author 
Douglas Quigg (dstroy0 dquigg123@gmail.com)

## user
{user}

## brief 
This file is meant to familiarize you with using cli_gen_tool to integrate the generated CLI.  
This readme file was generated by InputHandler's cli_gen_tool.  

## tool version
{tool_version}  

## InputHandler version
{lib_version}

## date
{docs_date}

## copyright
Copyright (c) {docs_year}

## license 
GNU GPL3  
Copyright (c) {docs_year} Douglas Quigg (dstroy0) <dquigg123@gmail.com>  
This program is free software; you can redistribute it and/or  
modify it under the terms of the GNU General Public License  
version 3 as published by the Free Software Foundation.  

## purpose
This tool is meant to assist in constructing/sharing interfaces using InputHandler.  

## docs
Documentation for the LIBRARY is available [here](https://dstroy0.github.io/InputHandler/lib/index.html)  
Documentation for the TOOL is available [here](https://dstroy0.github.io/InputHandler/cli_gen_tool/index.html)  

## help
If you don't see a topic relevant to your issue, please create a new discussion here: [InputHandler help/issue discussion](https://github.com/dstroy0/InputHandler/discussions/categories/help-issue-discussion)  
Debugging assistance is available here: [InputHandler help/issue discussion](https://github.com/dstroy0/InputHandler/discussions)  

## feature requests
To request a new feature please create a new discussion here: [InputHandler Ideas](https://github.com/dstroy0/InputHandler/discussions/categories/ideas)  

## bug reporting
Please report bugs in the TOOL using this bug report form: [tool bug report format](https://github.com/dstroy0/InputHandler/blob/main/tools/bug_report.md) [tool bug report forum](https://github.com/dstroy0/InputHandler/discussions/59)  
Please report bugs in the LIBRARY using this bug report form: [library bug report format](https://github.com/dstroy0/InputHandler/blob/main/src/bug_report.md) [library bug report forum](https://github.com/dstroy0/InputHandler/discussions/60)  

## disclaimer
Use this library, and any included tools at your own risk!  
The library's authors are not responsible for any damages which arise from the use of this tool (cli_gen_tool.py or its binaries) or library (InputHandler and dependencies).  
The software (InputHandler library and cli_gen_tool.py and associated dependencies) conveys NO warranty of any kind, implied or otherwise.  
The user is ultimately responsible for configuring and implementing their own interface.  

## interface creation instructions
When first creating an interface, it is best practice to set an output stream, buffer size, and enable all builtins.
This makes debugging commands easy, it is trivial to disable output after verifying the interface behaves as intended.

{generated_code_section}
{include_instructions}
{function_instructions}  
{copy_instructions}  
{functions_with_return}
{setup_instructions}  
{setup_code}  

{loop_instructions}  
{loop_code}  

"""
    # instructions
    rdme_gen_inst = "## generated code"
    rdme_include_inst = """
// copy/paste these preprocessor statements into your include section or at the top of your *.ino
#include "CLI/setup.h" """

    rdme_copy_inst = "Copy/Paste these functions into your code before setup():"
    rdme_function_inst = "These are wrappers generated for argument retrieval, or to put custom statements that run on command entry."
    rdme_setup_inst = "Copy/Paste this statement into your setup() function, after initializing any Streams that you plan on using with the interface you build:"
    rdme_loop_inst = "Copy/Paste this statement into your loop() function:"

    ## Automatically generated file docstring.
    docfs = """/* Generated by cli_gen_tool version <{docs_version}>; using InputHandler version <{lib_version}> */
/**
* @file {docs_filename}
* @author Douglas Quigg (dstroy0 dquigg123@gmail.com)
* @brief {docs_brief}
* @version {docs_version}
* @date {docs_date}
*
* @copyright Copyright (c) {docs_year}
*/
/*
* Copyright (c) {docs_year} Douglas Quigg (dstroy0) <dquigg123@gmail.com>
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* version 3 as published by the Free Software Foundation.
*/
"""

    ## setup.h filestring
    setup_h_fs = """
#if !defined(__CLI_SETUP__)
    #define __CLI_SETUP__
    #include "cli_InputHandler.h"{arduino_compatibility}
    #include "functions.h"
    #include "parameters.h"

{outputbuffer}
const PROGMEM IH_pname pname = "{processname}"; // process name
const PROGMEM IH_eol peol = "{processeol}"; // process end of line characters
const PROGMEM IH_input_cc pinputcc = "{processinputcontrolchar}"; // input control char sequence
const PROGMEM IH_wcc pwcc = "{processwildcardchar}"; // process wildcard char

// data delimiter sequences
const PROGMEM InputProcessDelimiterSequences pdelimseq = {{
    {numdelimseq}, // number of delimiter sequences
    {delimseqlens}, // delimiter sequence lens
    {delimseqs} // delimiter sequences
}};

// start stop data delimiter sequences
const PROGMEM InputProcessStartStopSequences pststpseq = {{
    {numstartstoppairs}, // num start stop sequence pairs
    {startstopseqlens}, // start stop sequence lens
    {startstopseqs} // start stop sequence pairs
}};

const PROGMEM InputProcessParameters input_prm[1] = {{
    &pname,
    &peol,
    &pinputcc,
    &pwcc,
    &pdelimseq,
    &pststpseq}};

// constructor
{constructor}{setupprototype}{loopprototype}

#include "setup.cpp"
#endif
// end of file
"""
    ## setup.cpp setup function
    setup_cpp_setup_function_string = """
void InputHandler_setup()
{{{setupfunctionentry}{defaultfunction}{commandlist}{begin}{options}{setupfunctionexit}
}}
"""
    ## setup.cpp loop function
    setup_cpp_loop_function_string = """
void InputHandler_loop()
{{{loopstatements}
}}
"""
    ## setup.cpp filestring
    setup_cpp_fs = """
#include "setup.h"

{setupfunction}{loopfunction}

// end of file
"""
    ## functions.h filestring
    functions_h_fs = """
#if !defined(__FUNCTIONS_H__)
    #define __FUNCTIONS_H__
    #include "cli_InputHandler.h"
    
{functionprototypes}

#include "functions.cpp" // Generated InputHandler function definitions

#endif

// end of file
"""
    ## functions.cpp function format string
    functions_cpp_function_string = """void {functionname}(UserInput* _{objectname}){{{statements}}}
"""
    ## functions.cpp filestring
    functions_cpp_fs = """
#include "functions.h"
    
{functions}// end of file
"""
    ## single CommandParameters format string
    commandparameters_string = """
/**
   @brief CommandParameters struct for {functionname}
*/
const PROGMEM CommandParameters {functionname}_param[1] = 
{{
    {functionname}, // function pointer
    {wildcardflag}, // wildcard flag
    "{commandstring}", // command string
    {lencommandstring}, // command string num characters
    {parentid}, // parent id
    {commandid}, // this command id (tree unique)
    {commanddepth}, // command depth
    {commandsubcommands}, // number of subcommands
    {argumenthandling}, // argument handling
    {minnumargs}, // minimum expected number of arguments
    {maxnumargs}, // maximum expected number of arguments
    /* UITYPE arguments */
    {argtypearray}    
}};
{commandconstructor}{newline}"""

    ## nested CommandParameters format string
    nested_commandparameters_string = """
/**
   @brief CommandParameters struct for {functionname}
*/
const PROGMEM CommandParameters {functionname}_param[1 /* root */ + {numberofchildren} /* child(ren) */] = 
{{
    {{
      {functionname}, // function pointer
      {wildcardflag}, // wildcard flag
      "{commandstring}", // command string
      {lencommandstring}, // command string num characters
      {parentid}, // parent id
      {commandid}, // this command id (tree unique)
      {commanddepth}, // command depth
      {commandsubcommands}, // number of subcommands
      {argumenthandling}, // argument handling
      {minnumargs}, // minimum expected number of arguments
      {maxnumargs}, // maximum expected number of arguments
      /* UITYPE arguments */
      {argtypearray}   
    }},
{children}
}};
{commandconstructor}
"""
    ## parameters.h filestring
    parameters_h_fs = """
#if !defined(__PARAMETERS_H__)
    #define __PARAMETERS_H__
    #include "setup.h"
    
{parameters}
#endif

// end of file
"""

    ## InputHandler return function
    ih_return_function_code_fs = """
void {functionname}(UserInput* _{objectname}) 
{{
    // your statements here
}}
"""
    cpp_md_tag = """
```cpp
    {statements}
```"""

    ## file construction strings database
    fsdb = {
        "readme": {
            "md": {
                "filestring components": {
                    "cpp md tag": cpp_md_tag,
                    "return function code": ih_return_function_code_fs,
                }
            }
        },
        "setup": {
            "h": {
                "filestring components": {
                    "arduino compatibility": '\n    #include "cli_InputHandler.cpp"\n',
                    "outputbuffer": "\nchar {outputbuffername}[{buffersize}] = {bufferchar}; // output buffer size\n",
                    "classoutput": "({input_prm}, {outputbuffer}, buffsz({outputbuffer}))",
                    "constructor": "UserInput {objectname}{classoutput};\n",
                    "prototypes": {
                        "setup": "\nvoid InputHandler_setup();",
                        "loop": "\nvoid InputHandler_loop();",
                    },
                },
                "filestring": setup_h_fs,
            },  # end setup h
            "cpp": {
                "filestring components": {
                    "setup function": setup_cpp_setup_function_string,
                    "loop function": setup_cpp_loop_function_string,
                    "addCommand": {
                        "call": "\n  {objectname}.addCommand({commandparametersname});"
                    },
                    "defaultFunction": {
                        "call": "\n  {objectname}.defaultFunction({defaultfunctionname}); // default function is called when user input has no match or is not valid"
                    },
                    "listCommands": {
                        "call": "\n  {objectname}.listCommands(); // formats {outputbuffer} with the command list"
                    },
                    "listSettings": {
                        "call": "\n  {objectname}.listSettings(); // formats {outputbuffer} with the process settings (uses a lot of ram; for setting and testing)"
                    },
                    "outputToStream": {
                        "call": "\n  {objectname}.outputToStream({stream}); // class output"
                    },
                    "getCommandFromStream": {
                        "call": "\n  {objectname}.getCommandFromStream({stream}); // parse input"
                    },
                    "begin": {
                        "call": "\n  {objectname}.begin(); // Required. Returns true on success."
                    },
                    "setup function output": {
                        "stream": {
                            "entry": '\n  {stream}.println(F("{outputstring}"));',
                            "exit": '\n  {stream}.println(F("{outputstring}"));{ls}{lc}',
                        },
                        "buffer": {
                            "entry": '\n  if ((buffsz({outputbuffer})-outputIsAvailable()) > strlen("{outputstring}")+1) {{\n    snprintf_P({outputbuffer} + outputIsAvailable(), "{outputstring}");\n  }}',
                            "exit": '\n  if ((buffsz({outputbuffer})-outputIsAvailable()) > strlen("{outputstring}")+1) {{\n    snprintf_P({outputbuffer} + outputIsAvailable(), "{outputstring}");\n  }}{ls}{lc}',
                        },
                    },
                },
                "filestring": setup_cpp_fs,
            },  # end setup cpp
        },  # end setup
        "functions": {
            "h": {
                "filestring components": {
                    "function prototype": "\nvoid {functionname}(UserInput* _{objectname});",
                    "return function prototype": "\nextern void {functionname}(UserInput* _{objectname});",
                },
                "filestring": functions_h_fs,
            },  # end functions h
            "cpp": {
                "filestring components": {
                    "outputToStream": {
                        "call": " _{objectname}->outputToStream({stream});"
                    },
                    "listCommands": {"call": " _{objectname}->listCommands();"},
                    "listSettings": {
                        "call": " _{objectname}->listSettings(_{objectname});"
                    },
                    "function": functions_cpp_function_string,
                },
                "filestring": functions_cpp_fs,
            },  # end functions cpp
        },  # end functions
        "parameters": {
            "h": {
                "filestring components": {
                    "nested child": "    *{functionname}_param{comma} // pointer to {functionname}_param{newline}",
                    "command constructor": "CommandConstructor {functionname}_({functionname}_param); // {functionname}_ command constructor",
                    "nested command constructor": "CommandConstructor {functionname}_({functionname}_param, nprms({functionname}_param), {maxdepth}); // {functionname}_ command constructor",
                    "parameters": commandparameters_string,
                    "nested parameters": nested_commandparameters_string,
                },
                "filestring": parameters_h_fs,
            }  # end parameters h
        },  # end parameters
    }

    ## the constructor
    def __init__(self) -> None:
        super(cliFileStrings, self).__init__()
        cliFileStrings.version = self.version
        self.version = self.version
        cliFileStrings.lib_version = self.lib_version
        self.lib_version = self.lib_version


# end of file
