##
# @file clireadme.py
# @author Douglas Quigg (dstroy0 dquigg123@gmail.com)
# @brief cli readme.md generator
# @version 1.0
# @date 2023-05-22
# @copyright Copyright (c) 2023
# Copyright (C) 2023 Douglas Quigg (dstroy0) <dquigg123@gmail.com>
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# version 3 as published by the Free Software Foundation.

from __future__ import absolute_import
import os
import datetime
from modules.cli.filestrings import CLIFileStrings


class ReadMe(object):
    """README.md generator

    Args:
        object (object): specialized base object
    """

    ## the constructor
    def __init__(self) -> None:
        """the constructor"""
        super(ReadMe, self).__init__()
        self.cliopt = self.cli_options
        self.fsdb = self.fsdb

    def readme_md(self) -> str:
        """generates the file README.md for InputHandlers autogenerated CLI

        Args:
            item_string (str): code to highlight
            place_cursor (bool, optional): Place cursor on code if True. Defaults to False.
        """
        object_name = "inputHandler"
        username = os.getlogin()
        buffer_size = self.cli_options["process output"]["var"]["buffer size"]
        stream_string = self.cli_options["process output"]["var"]["output stream"]

        year = str(datetime.date.today())[0:4]
        date = datetime.date.today()

        return_function_code = ""
        parameters = self.cliopt["commands"]["parameters"]
        for item in parameters:
            if len(parameters[item]["returnFunctionName"]) > 0:
                function_string = self.fsdb["readme"]["md"]["filestring components"][
                    "return function code"
                ].format(
                    functionname=parameters[item]["returnFunctionName"],
                    objectname=object_name,
                )
                return_function_code += function_string
        wrapped_return_function_code = self.fsdb["readme"]["md"][
            "filestring components"
        ]["cpp md tag"].format(statements=return_function_code)
        return_function_inst = ""
        copy_inst = ""
        wrapped_include_inst = ""
        gen_code_sect = ""
        wrapped_loop_code = ""
        wrapped_setup_code = ""
        _loop_code = ""
        _setup_code = ""
        _loop_inst = ""
        _setup_inst = ""

        if stream_string != "" and stream_string != None and int(buffer_size) != 0:
            _setup_code = "InputHandler_setup();"
            _loop_code = "InputHandler_loop();"
        elif stream_string == "" or stream_string == None and int(buffer_size) != 0:
            _setup_code = "InputHandler_setup();"
            _loop_code = "InputHandler_loop();"

        if len(return_function_code) > 0:
            return_function_inst = CLIFileStrings.rdme_function_inst
            copy_inst = CLIFileStrings.rdme_copy_inst
            gen_code_sect = CLIFileStrings.rdme_gen_inst
            include_inst = CLIFileStrings.rdme_include_inst
            wrapped_include_inst = self.fsdb["readme"]["md"]["filestring components"][
                "cpp md tag"
            ].format(statements=include_inst)
            _setup_code = "InputHandler_setup();"
            _loop_code = "InputHandler_loop();"

        if len(_setup_code) > 0:
            wrapped_setup_code = self.fsdb["readme"]["md"]["filestring components"][
                "cpp md tag"
            ].format(statements=_setup_code)
            _setup_inst = CLIFileStrings.rdme_setup_inst

        if len(_loop_code) > 0:
            wrapped_loop_code = self.fsdb["readme"]["md"]["filestring components"][
                "cpp md tag"
            ].format(statements=_loop_code)
            _loop_inst = CLIFileStrings.rdme_loop_inst

        if len(username) > 0:
            username = f"User: {username}"
        ll = CLIFileStrings.lib_license_md.format(docs_year=year)
        code_string = CLIFileStrings.readmemd.format(
            user=username,
            tool_version=CLIFileStrings.version,
            lib_version=CLIFileStrings.lib_version,
            lib_license=ll,
            docs_date=date,
            docs_year=year,
            generated_code_section=gen_code_sect,
            include_instructions=wrapped_include_inst,
            function_instructions=return_function_inst,
            copy_instructions=copy_inst,
            functions_with_return=wrapped_return_function_code,
            setup_instructions=_setup_inst,
            setup_code=wrapped_setup_code,
            loop_instructions=_loop_inst,
            loop_code=wrapped_loop_code,
        )
        return code_string
