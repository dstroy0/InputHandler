##
# @file main_window.py
# @author Douglas Quigg (dstroy0 dquigg123@gmail.com)
# @brief InputHandler CLI generation tool
# @version 1.0
# @date 2023-05-16
# @copyright Copyright (c) 2023
# Copyright (C) 2023 Douglas Quigg (dstroy0) <dquigg123@gmail.com>
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# version 3 as published by the Free Software Foundation.

# imports
from __future__ import absolute_import

from PySide6.QtCore import (
    QEvent,
    QObject,
    QSettings,
    Qt,
    QTimer,
    QDir,
)
from PySide6.QtGui import QCursor
from PySide6.QtWidgets import (
    QDialog,
    QMainWindow,
)


# import classes generated by PySide6 uic
from modules.uic.preferencesDialog import Ui_Preferences  # preferences dialog
from modules.uic.commandParametersDialog import (
    Ui_commandParametersDialog,
)  # tab two popup dialog box
from modules.uic.logHistoryDialog import Ui_logHistoryDialog  # log history dialog
from modules.uic.mainWindow import Ui_MainWindow  # main window with tabs
from modules.uic.generateCLIDialog import Ui_generateDialog  # file generation dialog

# external class methods
from modules.data_models import dataModels  # app data models
from modules.command_tree import CommandTreeMethods  # command tree interaction
from modules.command_parameters import (
    CommandParametersMethods,
)  # command parameters interaction
from modules.settings_tree import SettingsTreeMethods  # settings tree interaction
from modules.preferences import PreferencesMethods  # preferences interaction
from modules.mainwindow_methods import MainWindowMethods  # mainwindow interaction
from modules.code_generation import CodeGeneration  # code preview and generation
from modules.cli.cli_helper_methods import CLIHelperMethods  # file generation helpers


## This is the main display window
#
# MainWindow is the parent of all process subwindows
# (MainWindow is noninteractable when any of its child popups are active except log history)
class MainWindow(
    QMainWindow,
    SettingsTreeMethods,
    CommandParametersMethods,
    CommandTreeMethods,
    PreferencesMethods,
    MainWindowMethods,
    CodeGeneration,
    CLIHelperMethods,
):
    ## The constructor.
    def __init__(
        self,
        parent,
    ):
        super(MainWindow, self).__init__()
        ## app settings
        # settings object; platform independent
        # https://doc.qt.io/qt-6/qsettings.html
        self.settings = QSettings("InputHandler", "cli_gen_tool")

        ## import parent variables, methods, and objects
        self.parent_instance = parent
        self.set_up_session = self.parent_instance.set_up_session
        self.lib_root_path = self.parent_instance.lib_root_path
        self.create_qdialog = parent.create_qdialog
        self.inputhandler_save_path = parent.inputhandler_save_path

        self.write_cli_gen_tool_json = parent.write_cli_gen_tool_json
        self.write_json = parent.write_json
        self.read_json = parent.read_json
        self.create_file_error_qdialog = parent.create_file_error_qdialog
        self.get_project_dir = parent.get_project_dir
        self.open_file = parent.open_file

        self.get_child_logger = self.parent_instance.get_child_logger

        self.app = parent.app  # QApplication

        # MainWindow logger
        MainWindow.logger = self.get_child_logger(__name__)
        CLIHelperMethods.__init__(self)
        # pathing
        # /InputHandler/src/config/config.h
        default_lib_config_path = QDir(self.lib_root_path + "/src/config/")
        self.default_lib_config_path = default_lib_config_path.toNativeSeparators(
            default_lib_config_path.absoluteFilePath("config.h")
        )

        # /InputHandler/session/cli_gen_tool.json
        cli_gen_tool_json_path = QDir(self.inputhandler_save_path + "/session/")
        self.cli_gen_tool_json_path = cli_gen_tool_json_path.toNativeSeparators(
            cli_gen_tool_json_path.absoluteFilePath("cli_gen_tool.json")
        )

        # objects
        self.qcursor = QCursor()

        ## models
        # generated file min length
        self.minimum_file_len = dataModels.minimum_file_len_dict
        # cli opt db
        self.cli_options = dataModels.cliopt_model
        # code preview db
        self.code_preview_dict = dataModels.generated_filename_dict
        # default settings dict to regen cli_gen_tool.json if it becomes corrupt or doesnt exist
        self.defaultGuiOpt = dataModels.default_session_model

        # MainWindow state variables
        # ask user if they want to save their work on exit
        self.prompt_to_save = False
        self.windowtitle_set = False
        self.settings_tree_collapsed = False
        self.command_tree_collapsed = False
        self.loading = True
        self.version = self.parent_instance.version
        self.lib_version = parent.lib_version
        self.qscreen = self.screen()

        self.input_config_file_lines = []
        # the settings that the session started with
        self.default_settings_tree_values = {}
        # session db
        self.session = {}

        # InputHandler builtin user interactable commands
        self.ih_builtins = ["listSettings", "listCommands"]

        self.set_up_main_window(Ui_MainWindow())
        MainWindowMethods.__init__(self)

        self.set_up_session()

        # Splashscreen timer
        self.timer = QTimer()
        self.timer.setSingleShot(True)
        self.timer.start(
            self.parent_instance.splashscreen_duration
        )  # Show app splash for `splashscreen_duration`
        self.show_splash()

        self.set_up_log_history_dialog(Ui_logHistoryDialog())

        # preferences dialog
        self.preferences = QDialog(self)
        self.preferences.dlg = Ui_Preferences()
        self.preferences.dlg.setupUi(self.preferences)

        # init and config classes
        self.logger.debug("Importing external classes.")
        SettingsTreeMethods.__init__(self)
        self.get_initial_config_path()
        CommandParametersMethods.__init__(self)
        CommandTreeMethods.__init__(self)
        PreferencesMethods.__init__(self)
        CodeGeneration.__init__(self)

        self.set_up_ui_icons()
        self.cli_generation_dialog_setup(Ui_generateDialog())
        # MainWindow actions
        self.mainwindow_menu_bar_actions_setup()
        self.mainwindow_button_actions_setup()
        # end MainWindow actions

        # settings and command trees
        self.parse_config()
        self.build_code_preview_widgets()
        self.command_tree = self.build_command_tree()
        self.settings_tree = self.build_settings_tree()
        self.command_tree.get_settings_tree()

        self.preferences_dialog_setup()
        self.set_up_command_parameters_dialog(Ui_commandParametersDialog())
        self.display_initial_code_preview()

        # viewports are QAbstractScrollArea, we filter events in them to react to user interaction in specific ways
        self.log.dlg.logHistoryPlainTextEdit.viewport().installEventFilter(self)
        self.settings_tree.viewport().installEventFilter(self)
        self.command_tree.viewport().installEventFilter(self)

        # bring MainWindow in focus
        self.setWindowFlags(self.windowFlags() | Qt.WindowStaysOnTopHint)
        self.setWindowFlags(self.windowFlags() & ~Qt.WindowStaysOnTopHint)
        self.logger.info("CLI generation tool ready.")
        self.loading = False
        # end MainWindow.__init__()

    def closeEvent(self, event: QEvent):
        self._closeEvent(event)

    def eventFilter(self, watched: QObject, event: QEvent) -> bool:
        self._eventFilter(watched, event)
        return super().eventFilter(watched, event)

    def readSettings(self, settings: QSettings):
        self._readSettings(settings)

    @staticmethod
    def restart(self, reason: str) -> None:
        MainWindow.logger.warning("Restarting app; " + reason)
        self.do_before_app_close(None, True)


# end MainWindow
