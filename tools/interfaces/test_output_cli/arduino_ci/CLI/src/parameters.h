/* Generated by cli_gen_tool version <1.0>; using InputHandler version <0.9a> */
/**
* @file parameters.h
* @author Douglas Quigg (dstroy0 dquigg123@gmail.com)
* @brief InputHandler autogenerated parameters.h
* @version 1.0
* @date 2023-02-23
*
* @copyright Copyright (c) 2023
*/
/*
* Copyright (c) 2023 Douglas Quigg (dstroy0) <dquigg123@gmail.com>
*
* License: GNU GPL3
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* version 3 as published by the Free Software Foundation.
*/


#if !defined(__PARAMETERS_H__)
    #define __PARAMETERS_H__
    #include "CLI.h"
    

/**
   @brief Parameters struct for listCommands
*/
const PROGMEM Parameters listCommands_param[1] = 
{
    listCommands, // function pointer
    no_wildcards, // wildcard flag
    "listCommands", // command string
    12, // command string num characters
    0, // parent id
    0, // this command id (tree unique)
    0, // command depth
    0, // number of subcommands
    UI_ARG_HANDLING::no_args, // argument handling
    0, // minimum expected number of arguments
    0, // maximum expected number of arguments
    /* UITYPE arguments */
    {UITYPE::NO_ARGS}    
};
Command listCommands_(listCommands_param); // listCommands_ command constructor

/**
   @brief Parameters struct for listSettings
*/
const PROGMEM Parameters listSettings_param[1] = 
{
    listSettings, // function pointer
    no_wildcards, // wildcard flag
    "listSettings", // command string
    12, // command string num characters
    0, // parent id
    0, // this command id (tree unique)
    0, // command depth
    0, // number of subcommands
    UI_ARG_HANDLING::no_args, // argument handling
    0, // minimum expected number of arguments
    0, // maximum expected number of arguments
    /* UITYPE arguments */
    {UITYPE::NO_ARGS}    
};
Command listSettings_(listSettings_param); // listSettings_ command constructor

/**
   @brief Parameters struct for testa_3
*/
const PROGMEM Parameters testa_3_param[1] = 
{
    testa_3, // function pointer
    no_wildcards, // wildcard flag
    "testa", // command string
    5, // command string num characters
    0, // parent id
    2, // this command id (tree unique)
    1, // command depth
    2, // number of subcommands
    UI_ARG_HANDLING::no_args, // argument handling
    0, // minimum expected number of arguments
    0, // maximum expected number of arguments
    /* UITYPE arguments */
    {UITYPE::NO_ARGS}    
};

/**
   @brief Parameters struct for testb_4
*/
const PROGMEM Parameters testb_4_param[1] = 
{
    testb_4, // function pointer
    no_wildcards, // wildcard flag
    "testb", // command string
    5, // command string num characters
    2, // parent id
    3, // this command id (tree unique)
    2, // command depth
    4, // number of subcommands
    UI_ARG_HANDLING::no_args, // argument handling
    0, // minimum expected number of arguments
    0, // maximum expected number of arguments
    /* UITYPE arguments */
    {UITYPE::NO_ARGS}    
};

/**
   @brief Parameters struct for testc_5
*/
const PROGMEM Parameters testc_5_param[1] = 
{
    testc_5, // function pointer
    no_wildcards, // wildcard flag
    "testc", // command string
    5, // command string num characters
    3, // parent id
    3, // this command id (tree unique)
    3, // command depth
    0, // number of subcommands
    UI_ARG_HANDLING::no_args, // argument handling
    0, // minimum expected number of arguments
    0, // maximum expected number of arguments
    /* UITYPE arguments */
    {UITYPE::NO_ARGS}    
};

/**
   @brief Parameters struct for testd_6
*/
const PROGMEM Parameters testd_6_param[1] = 
{
    testd_6, // function pointer
    no_wildcards, // wildcard flag
    "testd", // command string
    5, // command string num characters
    3, // parent id
    3, // this command id (tree unique)
    3, // command depth
    2, // number of subcommands
    UI_ARG_HANDLING::no_args, // argument handling
    0, // minimum expected number of arguments
    0, // maximum expected number of arguments
    /* UITYPE arguments */
    {UITYPE::NO_ARGS}    
};

/**
   @brief Parameters struct for teste_7
*/
const PROGMEM Parameters teste_7_param[1] = 
{
    teste_7, // function pointer
    no_wildcards, // wildcard flag
    "teste", // command string
    5, // command string num characters
    3, // parent id
    3, // this command id (tree unique)
    4, // command depth
    2, // number of subcommands
    UI_ARG_HANDLING::no_args, // argument handling
    0, // minimum expected number of arguments
    0, // maximum expected number of arguments
    /* UITYPE arguments */
    {UITYPE::NO_ARGS}    
};

/**
   @brief Parameters struct for testf_8
*/
const PROGMEM Parameters testf_8_param[1] = 
{
    testf_8, // function pointer
    no_wildcards, // wildcard flag
    "testf", // command string
    5, // command string num characters
    3, // parent id
    3, // this command id (tree unique)
    5, // command depth
    2, // number of subcommands
    UI_ARG_HANDLING::no_args, // argument handling
    0, // minimum expected number of arguments
    0, // maximum expected number of arguments
    /* UITYPE arguments */
    {UITYPE::NO_ARGS}    
};

/**
   @brief Parameters struct for testg_9
*/
const PROGMEM Parameters testg_9_param[1] = 
{
    testg_9, // function pointer
    no_wildcards, // wildcard flag
    "testg", // command string
    5, // command string num characters
    3, // parent id
    3, // this command id (tree unique)
    6, // command depth
    0, // number of subcommands
    UI_ARG_HANDLING::no_args, // argument handling
    0, // minimum expected number of arguments
    0, // maximum expected number of arguments
    /* UITYPE arguments */
    {UITYPE::NO_ARGS}    
};

/**
   @brief Parameters struct for test_2
*/
const PROGMEM Parameters test_2_param[1 /* root */ + 7 /* child(ren) */] = 
{
    {
      test_2, // function pointer
      no_wildcards, // wildcard flag
      "test", // command string
      4, // command string num characters
      0, // parent id
      0, // this command id (tree unique)
      0, // command depth
      2, // number of subcommands
      UI_ARG_HANDLING::no_args, // argument handling
      0, // minimum expected number of arguments
      0, // maximum expected number of arguments
      /* UITYPE arguments */
      {UITYPE::NO_ARGS}   
    },
    *testa_3_param, // pointer to testa_3_param
    *testb_4_param, // pointer to testb_4_param
    *testc_5_param, // pointer to testc_5_param
    *testd_6_param, // pointer to testd_6_param
    *teste_7_param, // pointer to teste_7_param
    *testf_8_param, // pointer to testf_8_param
    *testg_9_param  // pointer to testg_9_param
};
Command test_2_(test_2_param, nprms(test_2_param), 6); // test_2_ command constructor

#endif

// end of file
