/* Generated by cli_gen_tool version <1.0>; using InputHandler version <0.9a> */
/**
* @file CLI.h
* @author Douglas Quigg (dstroy0 dquigg123@gmail.com)
* @brief InputHandler autogenerated CLI.h
* @version 1.0
* @date 2023-02-24
*
* @copyright Copyright (c) 2023
*/
/*
* Copyright (c) 2023 Douglas Quigg (dstroy0) <dquigg123@gmail.com>
*
* License: GNU GPL3
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* version 3 as published by the Free Software Foundation.
*/


#if !defined(__CLI_SETUP__)
    #define __CLI_SETUP__
    #include "InputHandler.h"
    #include "functions.h"
    #include "parameters.h"


char InputHandler_output_buffer[700] = {'\0'}; // output buffer size

const PROGMEM ih::ProcessName pname = ""; // process name
const PROGMEM ih::EndOfLineChar peol = "\r\n"; // process end of line characters
const PROGMEM ih::ControlCharSeq pinputcc = "##"; // input control char sequence
const PROGMEM ih::WildcardChar pwcc = "*"; // process wildcard char

// data delimiter sequences
const PROGMEM ih::DelimiterSequences pdelimseq = {
    2, // number of delimiter sequences
    {0, 1}, // delimiter sequence lens
    {" ", ","} // delimiter sequences
};

// start stop data delimiter sequences
const PROGMEM ih::StartStopSequences pststpseq = {
    1, // num start stop sequence pairs
    {1, 1}, // start stop sequence lens
    {"\"", "\""} // start stop sequence pairs
};

const PROGMEM ih::InputParameters input_prm[1] = {
    &pname,
    &peol,
    &pinputcc,
    &pwcc,
    &pdelimseq,
    &pststpseq};

// constructor
ih::UserInput inputHandler(input_prm, InputHandler_output_buffer, buffsz(InputHandler_output_buffer));

void InputHandler_setup()
{
  Serial.println(F("Setting up InputHandler..."));
  inputHandler.defaultFunction(unrecognized); // default function is called when user input has no match or is not valid
  inputHandler.addCommand(listCommands_);
  inputHandler.addCommand(listSettings_);
  inputHandler.begin(); // Required. Returns true on success.
  Serial.println(F("InputHandler setup complete."));
  inputHandler.listSettings(); // prints InputHandler settings
  inputHandler.outputToStream(Serial);
  inputHandler.listCommands(); // prints commands available to user
  inputHandler.outputToStream(Serial);
}

void InputHandler_loop()
{
  inputHandler.getCommandFromStream(Serial); // parse input
  inputHandler.outputToStream(Serial); // class output
}


#endif
// end of file
