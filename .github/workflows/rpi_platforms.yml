name: RPi platforms

# Controls when the workflow will run
on:
  push:
    branches:
      - main
    paths:
      - "**/examples/all_platforms/basic/GetCommandFromStream/**"
      - "**/examples/all_platforms/advanced/GetCommandFromStream/**"
      - "**/examples/all_platforms/advanced/MultiFile/**"
      - "**/examples/all_platforms/advanced/NestedCommands/**"
      - "**/examples/all_platforms/basic/WildcardCommands/**"
      - "**/interfaces/test_output_cli/**"
  workflow_dispatch:
    branches:
      - main
    paths:
      - "**/examples/all_platforms/basic/GetCommandFromStream/**"
      - "**/examples/all_platforms/advanced/GetCommandFromStream/**"
      - "**/examples/all_platforms/advanced/MultiFile/**"
      - "**/examples/all_platforms/advanced/NestedCommands/**"
      - "**/examples/all_platforms/basic/WildcardCommands/**"
      - "**/interfaces/test_output_cli/**"
  release:
    branches:
      - release
    paths:
      - "**/examples/all_platforms/basic/GetCommandFromStream/**"
      - "**/examples/all_platforms/advanced/GetCommandFromStream/**"
      - "**/examples/all_platforms/advanced/MultiFile/**"
      - "**/examples/all_platforms/advanced/NestedCommands/**"
      - "**/examples/all_platforms/basic/WildcardCommands/**"
      - "**/interfaces/test_output_cli/**"

jobs:
  build-lib-arduino:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        fqbn:
          - "arduino:mbed_nano:nanorp2040connect"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Compile examples
        uses: arduino/compile-sketches@main
        with:
          sketch-paths: ${{ matrix.example }}
          fqbn: ${{ matrix.fqbn }}

  build-lib-pio:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        examples:
          [
            "examples/all_platforms/advanced/GetCommandFromStream/GetCommandFromStream.ino",
            "examples/all_platforms/basic/GetCommandFromStream/GetCommandFromStream.ino",
            "examples/all_platforms/advanced/NestedCommands/NestedCommands.ino",
            "examples/all_platforms/basic/WildcardCommands/WildcardCommands.ino",
          ]
    steps:
      - uses: actions/checkout@v3
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Cache PlatformIO
        uses: actions/cache@v3
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
      - name: Set up Python
        uses: actions/setup-python@v4
      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio
          wget --no-check-certificate https://github.com/dstroy0/InputHandler/archive/main.zip -O /tmp/InputHandler-main.zip
          unzip /tmp/InputHandler-main.zip -d /tmp        
          ls
      - name: Build library examples for RP2040 platform with PlatformIO CI
        run: pio ci --lib="/tmp/InputHandler-main/"
          --board=nanorp2040connect
        env:
          PLATFORMIO_CI_SRC: ${{ matrix.examples }}

  build-tool-cli-arduino:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        fqbn:
          - "arduino:mbed_nano:nanorp2040connect"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Compile examples
        uses: arduino/compile-sketches@main
        with:
          sketch-paths: ${{ matrix.example }}
          fqbn: ${{ matrix.fqbn }}

  build-tool-cli-pio:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        example: ["**/main.cpp"]
    steps:
      - uses: actions/checkout@v3
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Cache PlatformIO
        uses: actions/cache@v3
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
      - name: Set up Python
        uses: actions/setup-python@v4
      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio
          wget --no-check-certificate https://github.com/dstroy0/InputHandler/archive/main.zip -O /tmp/InputHandler-main.zip
          unzip /tmp/InputHandler-main.zip -d /tmp                                                                     
          ls -R
      - name: Run PlatformIO
        run: pio ci
          --project-conf="tools/interfaces/test_output_cli/pio_ci/platformio.ini"
          --lib="tools/interfaces/test_output_cli/pio_ci/lib/CLI"
          --environment=rp2040
        env:
          PLATFORMIO_CI_SRC: ${{ matrix.example }}
