name: Adafruit platforms (dynamic)

on:
  push:
    branches:
      - main
    paths:
      - "**/adafruit_platforms_dynamic_matrix.yml"
      - "**/examples/**"
      - "**/test_output_cli/**"
  workflow_dispatch:
    branches:
      - main
    paths:
      - "**/examples/**"
      - "**/test_output_cli/**"
  release:
    branches:
      - release
    paths:
      - "**/examples/**"
      - "**/test_output_cli/**"

jobs:
  generate-job-matrices:
    runs-on: ubuntu-latest
    outputs:
      arduino-build-matrix: ${{ steps.set-arduino-matrix.outputs.arduino-build-matrix }}
      platformio-build-matrix: ${{ steps.set-platformio-matrix.outputs.platformio-build-matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # generate a build matrix for the arduino environment using InputHandler/supported_boards/generate_workflow_matrix.py
      - id: set-arduino-matrix
        run: |
          echo -n "arduino-build-matrix=" >> $GITHUB_OUTPUT
          python supported_boards/generate_workflow_matrix.py -c arduino -p adafruit >> $GITHUB_OUTPUT

      # generate a build matrix for the platformio environment using InputHandler/supported_boards/generate_workflow_matrix.py
      - id: set-platformio-matrix
        run: |
          echo -n "platformio-build-matrix=" >> $GITHUB_OUTPUT
          python supported_boards/generate_workflow_matrix.py -c platformio -p adafruit >> $GITHUB_OUTPUT

  build-arduino:
    needs: generate-job-matrices
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # extract the boards that need to be built from the build matrix
        boards: ${{ fromJSON(needs.generate-job-matrices.outputs.arduino-build-matrix)['boards'] }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Compile examples
        uses: arduino/compile-sketches@main
        with:
          # get extra platform packages here
          platforms: |
            - source-url: "https://adafruit.github.io/arduino-board-index/package_adafruit_index.json"
              name: "adafruit:samd"
          # extract sketch paths from build matrix
          sketch-paths: ${{ toJSON(fromJSON(needs.generate-job-matrices.outputs.arduino-build-matrix)['examples']) }}
          # get fqbn from build-arduino.strategy.matrix.boards
          fqbn: ${{ matrix.boards }}

      - name: Compile test cli
        uses: arduino/compile-sketches@main
        with:
          # get extra platform packages here
          platforms: |
            - source-url: "https://adafruit.github.io/arduino-board-index/package_adafruit_index.json"
              name: "adafruit:samd"
          # extract cli_gen_tool test cli path from build matrix
          sketch-paths: ${{ toJSON(fromJSON(needs.generate-job-matrices.outputs.arduino-build-matrix)['test_cli']) }}
          # get fqbn from build-arduino.strategy.matrix.boards
          fqbn: ${{ matrix.boards }}

  build-platformio:
    needs: generate-job-matrices
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # extract the boards that need to be built from the build matrix
        boards: ${{ fromJSON(needs.generate-job-matrices.outputs.platformio-build-matrix)['boards'] }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Cache PlatformIO
        uses: actions/cache@v3
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}

      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio    
          ls

      - name: Compile examples
        env:
          examples: ${{ toJSON(fromJSON(needs.generate-job-matrices.outputs.platformio-build-matrix)['examples']) }}
        # make a bash array from the examples json, then loop through the bash array which is the list of examples to be ran and execute pio ci for each
        run: |
          arrstring=$(echo $examples | sed -e 's/\[ //g' -e 's/\ ]//g' -e 's/\,//g')          
          arr=( $arrstring )                              
          for item in "${arr[@]}"
          do            
            example_src=${item//\"/}
            echo "Compiling $GITHUB_WORKSPACE/$example_src for ${{matrix.boards}}"
            pio ci \
              --lib="$GITHUB_WORKSPACE/src" \
              --board="${{matrix.boards}}" \              
              --verbose \
              $item \
              /
          done

      - name: Compile test cli
        env:
          test_cli: ${{ toJSON(fromJSON(needs.generate-job-matrices.outputs.platformio-build-matrix)['test_cli']) }}
        # make a bash array from the examples json, then loop through the bash array which is the list of examples to be ran and execute pio ci for each
        run: |
          arrstring=$(echo $test_cli | sed -e 's/\[ //g' -e 's/\ ]//g' -e 's/\,//g')          
          arr=( $arrstring )
          for item in "${arr[@]}"
          do                        
            src=$item | tr -d '"'
            echo "Compiling $GITHUB_WORKSPACE/"$path" for ${{matrix.boards}}"  
            pio ci \
              --verbose \
              --lib="$GITHUB_WORKSPACE/tools/interfaces/test_output_cli/pio_ci/lib/CLI" \
              --board="${{matrix.boards}}" \
              --project-option="build_src_filter = +<*> -<.git/> -<.svn/> -<./src/>" \
              "$GITHUB_WORKSPACE/$src" \
              /
          done
