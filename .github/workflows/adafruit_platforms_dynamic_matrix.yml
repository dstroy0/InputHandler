name: Adafruit platforms (dynamic)

# Controls when the workflow will run
on:
  push:
    branches:
      - main
    paths:
      - "**/examples/all_platforms/basic/GetCommandFromStream/**"
      - "**/examples/all_platforms/advanced/GetCommandFromStream/**"
      - "**/examples/all_platforms/advanced/MultiFile/**"
      - "**/examples/all_platforms/advanced/NestedCommands/**"
      - "**/examples/all_platforms/basic/WildcardCommands/**"
      - "**/interfaces/test_output_cli/**"
  workflow_dispatch:
    branches:
      - main
    paths:
      - "**/examples/all_platforms/basic/GetCommandFromStream/**"
      - "**/examples/all_platforms/advanced/GetCommandFromStream/**"
      - "**/examples/all_platforms/advanced/MultiFile/**"
      - "**/examples/all_platforms/advanced/NestedCommands/**"
      - "**/examples/all_platforms/basic/WildcardCommands/**"
      - "**/interfaces/test_output_cli/**"
  release:
    branches:
      - release
    paths:
      - "**/examples/all_platforms/basic/GetCommandFromStream/**"
      - "**/examples/all_platforms/advanced/GetCommandFromStream/**"
      - "**/examples/all_platforms/advanced/MultiFile/**"
      - "**/examples/all_platforms/advanced/NestedCommands/**"
      - "**/examples/all_platforms/basic/WildcardCommands/**"
      - "**/interfaces/test_output_cli/**"

jobs:
  generate-job-matrices:
    runs-on: ubuntu-latest
    outputs:
      arduino-build-matrix: ${{ steps.set-arduino-matrix.outputs.arduino-build-matrix }}
      platformio-build-matrix: ${{ steps.set-platformio-matrix.outputs.platformio-build-matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
      - id: set-arduino-matrix
        run: |
          echo -n "arduino-build-matrix=" >> $GITHUB_OUTPUT
          python supported_boards/generate_workflow_matrix.py -c arduino -p adafruit >> $GITHUB_OUTPUT
      - id: set-platformio-matrix
        run: |
          echo -n "platformio-build-matrix=" >> $GITHUB_OUTPUT
          python supported_boards/generate_workflow_matrix.py -c platformio -p adafruit >> $GITHUB_OUTPUT

  # build-arduino:
  #   needs: generate-job-matrices
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix: ${{ fromJSON(needs.generate-job-matrices.outputs.arduino-build-matrix) }}
  #   steps:
  #     - name: test
  #       env:
  #         fqbn-list: ${{ matrix.boards }}
  #       run: |
  #         echo "arduino: $fqbn-list"

  build-platformio:
    needs: generate-job-matrices
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        ${{ fromJSON(needs.generate-job-matrices.outputs.platformio-build-matrix) }}
        examples:
          [
            "examples/all_platforms/advanced/GetCommandFromStream/GetCommandFromStream.ino",
            "examples/all_platforms/basic/GetCommandFromStream/GetCommandFromStream.ino",
            "examples/all_platforms/advanced/NestedCommands/NestedCommands.ino",
            "examples/all_platforms/basic/WildcardCommands/WildcardCommands.ino",
          ]
    steps:
    - name: Checkout
      uses: actions/checkout@v3    
    - name: Set up Python
      uses: actions/setup-python@v4
    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: ${{ runner.os }}-pip-
    - name: Cache PlatformIO
      uses: actions/cache@v3
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio    
        ls    
    - name: Run PlatformIO      
      run: pio ci --lib="." --board="${{matrix.board}}"
      env:
        PLATFORMIO_CI_SRC: ${{ matrix.examples }}

