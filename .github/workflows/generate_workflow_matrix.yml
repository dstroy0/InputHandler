name: Generate workflow sequences

on:
  workflow_call:
    inputs:
      platform:
        required: true
        type: string
      compiler:
        required: true
        type: string
    outputs:
      boards:
        description: "The boards to build"
        value: ${{ jobs.generate-build-sequences.outputs.boards }}
      examples:
        description: "The examples to build"
        value: ${{ jobs.generate-build-sequences.outputs.examples }}
      test-cli:
        description: "The test cli to build"
        value: ${{ jobs.generate-build-sequences.outputs.test-cli }}
jobs:
  generate-build-matrix:
    runs-on: ubuntu-latest
    outputs:
      build-matrix: ${{ steps.set-build-matrix.outputs.build-matrix }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      # generate a build matrix using InputHandler/supported_boards/generate_workflow_matrix.py
      - id: set-build-matrix
        run: |
          build_matrix=$(python supported_boards/generate_workflow_matrix.py -c ${{ inputs.compiler }} -p ${{ inputs.platform }})
          echo "build-matrix=$build_matrix" >> $GITHUB_OUTPUT

  generate-build-sequences:
    needs: generate-build-matrix
    runs-on: ubuntu-latest
    outputs:
      boards: ${{ steps.set-build-sequences.outputs.boards }}
      examples: ${{ steps.set-build-sequences.outputs.examples }}
      test-cli: ${{ steps.set-build-sequences.outputs.test_cli }}
    steps:
      - id: set-build-sequences
        name: set-build-sequences
        env:
          boards: ${{ toJSON(fromJSON(needs.generate-build-matrix.outputs.build-matrix)['boards']) }}
          examples: ${{ toJSON(fromJSON(needs.generate-build-matrix.outputs.build-matrix)['examples']) }}
          test-cli: ${{ toJSON(fromJSON(needs.generate-build-matrix.outputs.build-matrix)['test_cli']) }}
        run: |
          jq -r ``${{ needs.generate-build-matrix.outputs.build-matrix }}``
          boards_arrstring=$( jq -j ${{ env.boards }} )
          boards_list=$( $boards_arrstring )
          examples_arrstring=$(echo ${{ env.examples }} | sed -e 's/\[ //g' -e 's/\ ]//g' -e 's/\,//g')
          examples_list=$(toJSON( $examples_arrstring )
          test_cli_arrstring=$(echo ${{ env.test_cli }} | sed -e 's/\[ //g' -e 's/\ ]//g' -e 's/\,//g')
          test_cli_list=$( $test_cli_arrstring )          
          echo -n "boards=$boards_list" >> $GITHUB_OUTPUT
          echo -n "examples=$examples_list" >> $GITHUB_OUTPUT
          echo -n "test_cli=$test_cli_list" >> $GITHUB_OUTPUT
